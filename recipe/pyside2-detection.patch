diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3a6b2c820..220f1bc37 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1022,39 +1022,39 @@ if(NOT FREECAD_LIBPACK_USE OR FREECAD_LIBPACK_CHECKFILE_CLBUNDLER)
         # CMake to fail to create Makefiles for a debug build.
         # So as a workaround we save and restore the value after checking for Shiboken2.
         set (SAVE_BUILD_TYPE ${CMAKE_BUILD_TYPE})
-        find_package(Shiboken2 QUIET)# REQUIRED
+        find_package(Shiboken2 REQUIRED)
         set (CMAKE_BUILD_TYPE ${SAVE_BUILD_TYPE})
-        if (Shiboken2_FOUND)
-            # Shiboken2 config file was found but it may use the wrong Python version
-            # Try to get the matching config suffix and repeat finding the package
-            if (PYTHON_VERSION_MAJOR LESS 3)
-                set(SHIBOKEN_PATTERN -python${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR})
-            else()
-                set(SHIBOKEN_PATTERN .cpython-${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR})
-            endif()
-
-            file(GLOB SHIBOKEN_CONFIG "${Shiboken2_DIR}/Shiboken2Config${SHIBOKEN_PATTERN}*.cmake")
-            if (SHIBOKEN_CONFIG)
-                get_filename_component(SHIBOKEN_CONFIG_SUFFIX ${SHIBOKEN_CONFIG} NAME)
-                string(SUBSTRING ${SHIBOKEN_CONFIG_SUFFIX} 15 -1 SHIBOKEN_CONFIG_SUFFIX)
-                string(REPLACE ".cmake" "" PYTHON_CONFIG_SUFFIX ${SHIBOKEN_CONFIG_SUFFIX})
-                message(STATUS "PYTHON_CONFIG_SUFFIX: ${PYTHON_CONFIG_SUFFIX}")
-                find_package(Shiboken2 QUIET)
-            endif()
-        endif()
-
-        if(NOT SHIBOKEN_INCLUDE_DIR)
-            message("====================\n"
-                    "shiboken2 not found.\n"
-                    "====================\n")
-        endif(NOT SHIBOKEN_INCLUDE_DIR)
-
-        find_package(PySide2 QUIET)# REQUIRED
-        if(NOT PYSIDE_INCLUDE_DIR)
-            message("==================\n"
-                    "PySide2 not found.\n"
-                    "==================\n")
-        endif(NOT PYSIDE_INCLUDE_DIR)
+        #if (Shiboken2_FOUND)
+            ## Shiboken2 config file was found but it may use the wrong Python version
+            ## Try to get the matching config suffix and repeat finding the package
+            #if (PYTHON_VERSION_MAJOR LESS 3)
+                #set(SHIBOKEN_PATTERN -python${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR})
+            #else()
+                #set(SHIBOKEN_PATTERN .cpython-${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR})
+            #endif()
+
+            #file(GLOB SHIBOKEN_CONFIG "${Shiboken2_DIR}/Shiboken2Config${SHIBOKEN_PATTERN}*.cmake")
+            #if (SHIBOKEN_CONFIG)
+                #get_filename_component(SHIBOKEN_CONFIG_SUFFIX ${SHIBOKEN_CONFIG} NAME)
+                #string(SUBSTRING ${SHIBOKEN_CONFIG_SUFFIX} 15 -1 SHIBOKEN_CONFIG_SUFFIX)
+                #string(REPLACE ".cmake" "" PYTHON_CONFIG_SUFFIX ${SHIBOKEN_CONFIG_SUFFIX})
+                #message(STATUS "PYTHON_CONFIG_SUFFIX: ${PYTHON_CONFIG_SUFFIX}")
+                #find_package(Shiboken2 QUIET)
+            #endif()
+        #endif()
+
+        #if(NOT SHIBOKEN_INCLUDE_DIR)
+            #message("====================\n"
+                    #"shiboken2 include dir not found.\n"
+                    #"====================\n")
+        #endif(NOT SHIBOKEN_INCLUDE_DIR)
+
+        find_package(PySide2 REQUIRED)
+        #if(NOT PYSIDE_INCLUDE_DIR)
+            #message("==================\n"
+                    #"PySide2 not found.\n"
+                    #"==================\n")
+        #endif(NOT PYSIDE_INCLUDE_DIR)
 
         find_package(PySide2Tools QUIET) #REQUIRED # PySide2 utilities (pyside2-uic & pyside2-rcc)
         if(NOT PYSIDE2_TOOLS_FOUND)
diff --git a/cMake/FindPySide2.cmake b/cMake/FindPySide2.cmake
new file mode 100644
index 000000000..92d7207d8
--- /dev/null
+++ b/cMake/FindPySide2.cmake
@@ -0,0 +1,48 @@
+# - Find PySide2 installation
+#
+# The following variable are set:
+#   PySide2_FOUND      - PySide2 was found
+#   PYSIDE2_FOUND      - PySide2 was found
+#   PYSIDE2_LIBRARY    - The PySide2 libraries
+#   PYSIDE2_INCLUDE_DIR - The PySide2 header-directory
+
+
+execute_process(COMMAND ${PYTHON_EXECUTABLE} -c "
+import find_pyside2_helper
+print(find_pyside2_helper.find_pyside2_library(), end="")
+"
+    RESULT_VARIABLE FAILURE
+    OUTPUT_VARIABLE PYSIDE2_LIBRARY_PATH
+    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
+)
+
+execute_process(COMMAND ${PYTHON_EXECUTABLE} -c "
+import find_pyside2_helper
+print(find_pyside2_helper.find_pyside2_includes(), end="");
+"
+    OUTPUT_VARIABLE PYSIDE2_INCLUDE_PATH
+    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
+)
+
+MESSAGE(STATUS "PYSIDE2_LIBRARY_PATH")
+MESSAGE(STATUS ${PYSIDE2_LIBRARY_PATH})
+
+MESSAGE(STATUS "PYSIDE2_INCLUDE_PATH")
+MESSAGE(STATUS ${PYSIDE2_INCLUDE_PATH})
+
+set(PYSIDE2_FOUND FALSE)
+if(NOT FAILURE)
+    set(PYSIDE2_FOUND TRUE)
+    set(PYSIDE2_LIBRARY ${PYSIDE2_LIBRARY_PATH} CACHE PATH "The location of the PySide2 library")
+    set(PYSIDE_LIBRARY ${PYSIDE2_LIBRARY_PATH} CACHE PATH "The location of the PySide2 library")
+    set(PYSIDE2_INCLUDE_DIR ${PYSIDE2_INCLUDE_PATH} CACHE PATH "The location of PySide2 headers")
+    set(PYSIDE_INCLUDE_DIR ${PYSIDE2_INCLUDE_PATH} CACHE PATH "The location of PySide2 headers")
+endif(NOT FAILURE)
+
+if(NOT PYSIDE2_FOUND)
+    MESSAGE("==================\n"
+            "PySide2 not found.\n"
+            "==================\n")
+endif(NOT PYSIDE2_FOUND)
+
+set(PySide2_FOUND ${PYSIDE2_FOUND})
diff --git a/cMake/FindShiboken2.cmake b/cMake/FindShiboken2.cmake
new file mode 100644
index 000000000..b3a33bfbf
--- /dev/null
+++ b/cMake/FindShiboken2.cmake
@@ -0,0 +1,50 @@
+# - Find Shiboken2 installation
+#
+# The following variable are set:
+#   Shiboken2_FOUND        - Shiboken2 was found
+#   Shiboken2_LIBRARY      - The Shiboken2 shared library
+#   Shiboken2_INCLUDE_DIR  - The Shiboken2 header directory
+
+
+execute_process(
+    COMMAND ${PYTHON_EXECUTABLE} -c "
+import find_pyside2_helper
+print(find_pyside2_helper.find_shiboken2_library());
+"
+    RESULT_VARIABLE FAILURE
+    OUTPUT_VARIABLE SHIBOKEN2_LIBRARY_PATH
+    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
+)
+
+execute_process(
+    COMMAND ${PYTHON_EXECUTABLE} -c "
+import find_pyside2_helper
+print(find_pyside2_helper.find_shiboken2_includes())
+"
+    RESULT_VARIABLE FAILURE
+    OUTPUT_VARIABLE SHIBOKEN2_INCLUDE_PATH
+    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
+)
+
+MESSAGE(STATUS "SHIBOKEN2_LIBRARY_PATH")
+MESSAGE(STATUS ${SHIBOKEN2_LIBRARY_PATH})
+
+MESSAGE(STATUS "SHIBOKEN2_INCLUDE_PATH")
+MESSAGE(STATUS ${SHIBOKEN2_INCLUDE_PATH})
+
+set(SHIBOKEN2_FOUND FALSE)
+if(NOT FAILURE)
+    set(SHIBOKEN2_FOUND TRUE)
+    set(SHIBOKEN2_LIBRARY ${SHIBOKEN2_LIBRARY_PATH} CACHE PATH "The location of the SHIBOKEN2 library")
+    set(SHIBOKEN_LIBRARY ${SHIBOKEN2_LIBRARY_PATH} CACHE PATH "The location of the SHIBOKEN2 library")
+    set(SHIBOKEN2_INCLUDE_DIR ${SHIBOKEN2_INCLUDE_PATH} CACHE PATH "The location of SHIBOKEN2 headers")
+    set(SHIBOKEN_INCLUDE_DIR ${SHIBOKEN2_INCLUDE_PATH} CACHE PATH "The location of SHIBOKEN2 headers")
+endif(NOT FAILURE)
+
+if(NOT SHIBOKEN2_FOUND)
+    MESSAGE("==================\n"
+            "SHIBOKEN2 not found.\n"
+            "==================\n")
+endif(NOT SHIBOKEN2_FOUND)
+
+set(Shiboken2_FOUND ${SHIBOKEN2_FOUND})
diff --git a/cMake/find_pyside2_helper.py b/cMake/find_pyside2_helper.py
new file mode 100644
index 000000000..524f0a0e4
--- /dev/null
+++ b/cMake/find_pyside2_helper.py
@@ -0,0 +1,78 @@
+import sysconfig
+import glob
+import os
+import sys
+
+info = sysconfig.get_paths()
+library_path = os.path.dirname(info["stdlib"])
+include_path = os.path.dirname(info["include"])
+
+DEBUGGING = False
+PYTHON_VERSION = str(sys.version_info.major) + str(sys.version_info.minor)
+
+LIB_SUFFIX = ".so"
+if sys.platform.startswith("win"):
+    LIB_SUFFIX = ".lib"
+elif sys.platform == "darwin":
+    LIB_SUFFIX = ".dylib"
+
+def debug_print(text):
+    if DEBUGGING:
+        print(text)
+
+def find_path(directory, test, target_name, find_dir=True):
+    """
+    returns all paths in directory where test returns True
+    test: function with args directory_path (root) and file name (fn)
+    """
+    found_files = []
+    for root, dirs, files in os.walk(directory):
+        for fn in files:
+            if test(root, fn):
+                if find_dir:
+                    found_files.append(root)
+                else:
+                    found_files.append(os.path.join(root, fn))
+    if len(found_files) == 0:
+        result = None
+        debug_print("{} not found in {}".format(target_name, directory))
+    elif len(found_files) > 0:
+        if len(found_files) > 1:
+            found_files.sort()
+            debug_print("{} paths possible for searchpath {}: {}".format(len(found_files), target_name, found_files))
+            debug_print("choosing first")
+        result = found_files[0]
+        debug_print("{} found in\n{}".format(target_name, result))
+    return result
+
+def pyside2_lib_test(root, fn):
+    return "pyside2" in fn and PYTHON_VERSION in fn and "packages" not in root and fn.endswith(LIB_SUFFIX)
+
+def pyside2_include_test(root, fn):
+    return "PySide2" in root and fn == "pyside.h"
+
+def shiboken2_lib_test(root, fn):
+    return "shiboken2" in fn and PYTHON_VERSION in fn and "packages" not in root and fn.endswith(LIB_SUFFIX)
+
+def shiboken2_include_test(root, fn):
+    return "shiboken2" in root and fn == "shiboken.h"
+
+def find_pyside2_library():
+    return find_path(library_path, pyside2_lib_test, "pyside2 library", find_dir=False)
+
+def find_pyside2_includes():
+    return find_path(include_path, pyside2_include_test, "pyside2 includes")
+
+def find_shiboken2_library():
+    return find_path(library_path, shiboken2_lib_test, "shiboken2 library", find_dir=False)
+
+def find_shiboken2_includes():
+    return find_path(include_path, shiboken2_include_test, "shiboken2 includes")
+
+
+if __name__ == "__main__":
+    DEBUGGING = True
+    find_pyside2_library()
+    find_pyside2_includes()
+    find_shiboken2_library()
+    find_shiboken2_includes()
\ No newline at end of file
diff --git a/src/Gui/CMakeLists.txt b/src/Gui/CMakeLists.txt
index b709ecbcc..1348b7331 100644
--- a/src/Gui/CMakeLists.txt
+++ b/src/Gui/CMakeLists.txt
@@ -171,38 +171,27 @@ IF(OCULUS_FOUND)
     )
 ENDIF(OCULUS_FOUND)
 
-if(SHIBOKEN_INCLUDE_DIR)
+if(SHIBOKEN_FOUND)
     if (BUILD_QT5)
         add_definitions(-DHAVE_SHIBOKEN2)
     else()
         add_definitions(-DHAVE_SHIBOKEN)
     endif()
-    include_directories(
-        ${SHIBOKEN_INCLUDE_DIR}
-    )
     list(APPEND FreeCADGui_LIBS
         ${SHIBOKEN_LIBRARY}
     )
-endif(SHIBOKEN_INCLUDE_DIR)
+endif(SHIBOKEN_FOUND)
 
-if(PYSIDE_INCLUDE_DIR)
-    include_directories(
-        ${PYSIDE_INCLUDE_DIR}
-        ${PYSIDE_INCLUDE_DIR}/QtCore
-        ${PYSIDE_INCLUDE_DIR}/QtGui
-    )
+if(PYSIDE_FOUND)
     list(APPEND FreeCADGui_LIBS
         ${PYSIDE_LIBRARY}
     )
     if (BUILD_QT5)
-        include_directories(
-            ${PYSIDE_INCLUDE_DIR}/QtWidgets
-        )
         add_definitions(-DHAVE_PYSIDE2)
     else()
         add_definitions(-DHAVE_PYSIDE)
     endif()
-endif(PYSIDE_INCLUDE_DIR)
+endif(PYSIDE_FOUND)
 
 generate_from_xml(DocumentPy)
 generate_from_xml(PythonWorkbenchPy)
